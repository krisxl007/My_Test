【XML】
使用XML作为传输格式的优势：
1. 格式统一, 符合标准
2. 容易与其他系统进行远程交互, 数据共享比较方便

缺点:
1. XML文件格式文件庞大, 格式复杂, 传输占用带宽
2. 服务器端和客户端都需要花费大量代码来解析XML, 不论服务器端和客户端代码变的异常复杂和不容易维护
3. 客户端不同浏览器之间解析XML的方式不一致, 需要重复编写很多代码
4. 服务器端和客户端解析XML花费资源和时间

用XML表示中国部分省市数据如下：

<?xml version="1.0" encoding="utf-8"?>
 　　<country>
 　　<name>中国</name>

 　　<province>
 　　<name>黑龙江</name>
 　　<citys>
 　　<city>哈尔滨</city>
 　　<city>大庆</city>
 　　</citys>
 　　</province>

 　　<province>
 　　<name>广东</name>
 　　<citys>
 　　<city>广州</city>
 　　<city>深圳</city>
 　　<city>珠海</city>
 　　</citys>
 　　</province>

 　　<province>
 　　<name>台湾</name>
 　　<citys>
 　　<city>台北</city>
 　　<city>高雄</city>
 　　</citys>
 　　</province>

 　　<province>
 　　<name>新疆</name>
 　　<citys>
 　　<city>乌鲁木齐</city>
 　　</citys>
 　　</province>

 　　</country>



【JSON】
那么除了XML格式, 还有没有其他格式, 有一种叫做JSON (JavaScript Object Notation) 的轻量级数据交换格式能够替代XML的工作.

优点:
1. 数据格式比较简单, 易于读写, 格式都是压缩的, 占用带宽小
2. 易于解析这种语言, 客户端JavaScript可以简单的通过eval()进行JSON数据的读取
3. 支持多种语言, 包括ActionScript, C, C#, ColdFusion, Java, JavaScript, Perl, PHP, Python, Ruby等语言服务器端语言, 便于服务器端的解析
4. 在PHP世界, 已经有PHP-JSON和JSON-PHP出现了, 便于PHP序列化后的程序直接调用. PHP服务器端的对象、数组等能够直接生JSON格式, 便于客户端的访问提取.
   另外PHP的PEAR类已经提出了支持 (http://pear.php.net/pepr/pepr-proposal-show.php?id=198)
5. 因为JSON格式能够直接为服务器端代码使用, 大大简化了服务器端和客户端的代码开发量, 但是完成的任务不变, 且易于维护

缺点:
1. 没有XML格式这么推广的深入人心和使用广泛, 没有XML那么通用性
2. JSON格式目前在Web Service中推广还属于初级阶段

用JSON表示如下：

 　　{
 　　	name:"中国",

 　　	province:[

	 　　{
	 　　	name:"黑龙江",
	 　　	citys:{
	 　　		city:["哈尔滨","大庆"]
	 　　	}
 　　	     },

 　　	     {
		 name:"广东",

		 citys:{
	 　		city:["广州","深圳","珠海"]
		 }
 　　	     },

 　　	     {
 　　		 name:"台湾",

 　　		 citys:{
 　　			city:["台北","高雄"]
 　　		}
 　　	     },

 　　	     {
 　　		 name:"新疆",

 　　		 citys:{
	 　		city:["乌鲁木齐"]
		 }
 　　	     }
 　　	]
 　　}


编码的可读性，xml有明显的优势，毕竟人类的语言更贴近这样的说明结构。json读起来更像一个数据块，读起来就比较费解了。
不过，我们读起来费解的语言，恰恰是适合机器阅读，所以通过json的索引.province[0].name就能够读取“黑龙江”这个值。　　
编码的手写难度来说，xml还是舒服一些，好读当然就好写。不过写出来的字符JSON就明显少很多。
去掉空白制表以及换行的话，JSON就是密密麻麻的有用数据，而xml却包含很多重复的标记字符。

