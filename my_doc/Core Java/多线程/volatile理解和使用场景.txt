volatile最简单的理解就是对变量的写操作是直接写到主内存上，不需要缓存在CPU高速缓存中，所以所有线程读到的都是最新值，volatile并不能
保证变量的线程安全


使用场景1：

volatile最适用一个线程写，多个线程读的场合。

如果有多个线程并发写操作，仍然需要使用锁或者线程安全的容器或者原子变量来代替。(摘自Netty权威指南)

疑问：如果只是赋值的原子操作，是否可以多个线程写？(答案：可以，但是一般没有这样的必要，即没有这样的应用场景)

 

最经典的使用案例：

复制代码
volatile boolean shutdownRequested;

...

public void shutdown() { shutdownRequested = true; }

public void doWork() { 
    while (!shutdownRequested) { 
        // do stuff
    }
}


使用场景2：

结合使用 volatile 和 synchronized 实现 “开销较低的读－写锁”

volatile 允许多个线程执行读操作，因此当使用 volatile 保证读代码路径时，要比使用锁执行全部代码路径获得更高的共享度 ―― 就像读－写操作一样。


public class CheesyCounter {

    private volatile int value;

    public int getValue() { return value; }

    public synchronized int increment() {
        return value++;
    }
}

或者

   private volatile long start = System.currentTimeMillis();
   public synchronized long get() {
        return start++;
    }