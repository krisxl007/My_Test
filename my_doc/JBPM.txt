JBPM所有工作，都是从核心引擎ProcessEngine开始：

一.流程定义(ProcessDefinition)

1.部署流程定义: 分为部署普通文件和压缩文件两种方法
	
(1)	// 部署（添加）
	// jbpm4_deployment
	// jbpm4_lob
	// jbpm4_deployprop
	@Test
	public void testDeploy() throws Exception {
		String deploymentId = processEngine.getRepositoryService()//
				.createDeployment()//
				.addResourceFromClasspath("helloworld/helloworld.jpdl.xml")//
				.addResourceFromClasspath("helloworld/helloworld.png")//
				.deploy();
		System.out.println("部署成功：deploymentId = " + deploymentId);
	}

(2)	// 部署（zip）
	@Test
	public void testDeploy_zip() throws Exception {
		// 找到zip资 源
		InputStream in = this.getClass().getClassLoader().getResourceAsStream("first.zip");
		ZipInputStream zipInputStream = new ZipInputStream(in);

		// 部署
		String deploymentId = processEngine.getRepositoryService()//
				.createDeployment()//
				.addResourcesFromZipInputStream(zipInputStream)//
				.deploy();
		System.out.println("部署成功：deploymentId = " + deploymentId);
	}

2.查看流程定义：
	
(1)	// 查询所有
	@Test
	public void findAll() throws Exception {
		// 查询
		List<ProcessDefinition> list = processEngine.getRepositoryService()//
				.createProcessDefinitionQuery()//
				// 过滤条件
				// .processDefinitionKey("")//
				// .processDefinitionNameLike("%xx%")//
				// 排序条件
				// .orderAsc(ProcessDefinitionQuery.PROPERTY_KEY)//
				// .orderDesc(ProcessDefinitionQuery.PROPERTY_VERSION)//
				// 执行查询
				// .uniqueResult();
				// .count();
				// .page(firstResult, maxResults)//
				.list();

		// 显示
		for (ProcessDefinition pd : list) {
			System.out.println("id=" + pd.getId()// 格式为：{key}-{version}，用于唯一的标识一个流程定义
					+ ", name=" + pd.getName()// 流程定义的名称，jpdl.xml中根元素的name属性的值
					+ ", key=" + pd.getKey()// 流程定义的key，jpdl.xml中根元素的key属性的值，默认是name属性的值
					+ ", version=" + pd.getVersion()// 自动生成的，同一个名称的第一个为1，以后的自动加1.
					+ ", deploymentId=" + pd.getDeploymentId()); // 所属的部署对象
		}
	}

(2)	// 查询所有最新版本的流程定义
	@Test
	public void findAllLatestVersions() throws Exception {
		// 查询所有，让所有最大的版本都排到最后面
		List<ProcessDefinition> all = processEngine.getRepositoryService()//
				.createProcessDefinitionQuery()//
				.orderAsc(ProcessDefinitionQuery.PROPERTY_VERSION)//
				.list();

		// 过滤出所有最新的版本
		Map<String, ProcessDefinition> map = new HashMap<String, ProcessDefinition>();
		for (ProcessDefinition pd : all) {
			map.put(pd.getKey(), pd);
		}

		// 显示
		for (ProcessDefinition pd : map.values()) {
			System.out.println("id=" + pd.getId()// 格式为：{key}-{version}，用于唯一的标识一个流程定义
					+ ", name=" + pd.getName()// 流程定义的名称，jpdl.xml中根元素的name属性的值
					+ ", key=" + pd.getKey()// 流程定义的key，jpdl.xml中根元素的key属性的值，默认是name属性的值
					+ ", version=" + pd.getVersion()// 自动生成的，同一个名称的第一个为1，以后的自动加1.
					+ ", deploymentId=" + pd.getDeploymentId()); // 所属的部署对象
		}
	}

3.删除流程定义：

(1)	// 删除
	@Test
	public void deleteById() throws Exception {
		String deploymentId = "80001";

		// // 删除指定的部署对象（流程定义），如果有关联的执行信息，就会报错
		// processEngine.getRepositoryService().deleteDeployment(deploymentId);

		// 删除指定的部署对象（流程定义），如果有关联的执行信息，会被同时删除
		processEngine.getRepositoryService().deleteDeploymentCascade(deploymentId);
	}

(2)	// 删除指定key的所有版本的流程定义
	@Test
	public void deleteByKey() throws Exception {
		// 查询出指定key的所有版本的流程定义
		List<ProcessDefinition> list = processEngine.getRepositoryService()//
				.createProcessDefinitionQuery()//
				.processDefinitionKey("helloworld")//
				.list();

		// 一一删除
		for (ProcessDefinition pd : list) {
			processEngine.getRepositoryService().deleteDeploymentCascade(pd.getDeploymentId());
		}
	}


二.流程实例(ProcessInstance)：

1.启动流程实例：启动流程实例时可以分为startProcessInstanceByKey和startProcessInstanceById两种方法
	
(1)	//按流程实例的Key和Id启动
	@Test
	public void startProcessInstance() throws Exception {
		//方法一:
		processEngine.getExecutionService().startProcessInstanceByKey("helloworld");

		//方法二:
		processEngine.getExecutionService().startProcessInstanceById("10001");
	}

(2)	//启动一个带有流程变量的流程实例
	@Test
	public void startProcessInstance() throws Exception {
		Map map = new HashMap();
		String s = "abcd";
		map.put("pw", s);
		processEngine.getExecutionService().startProcessInstanceByKey("helloworld",map);
	}


2.设置和获取流程变量: 有三种方法

(1)用executionService.setVariable()设置变量，对应的是executionService.getVariable()获取变量：

	// ============ 设置变量 ========================
	executionService.setVariable(executionId, name, value); // 设置一个变量
	executionService.setVariables(executionId, variablesMap); // 设置多个变量
					
	// ============ 获取变量 ========================
	executionService.getVariable(executionId, variableName); // 获取一个变量
	executionService.getVariableNames(executionId); // 返回Set<String>，是所有变量的名称集合
	executionService.getVariables(executionId, variableNames); //获取多个变量，返回Map<String,Object>，表示指定名称的变量信息

例：	// 设置流程变量
	@org.junit.Test
	public void testSetVariable() throws Exception {
		String executionId = "helloworld.90001";
		processEngine.getExecutionService()
				.setVariable(executionId, "请假天数", 15);
	}

	// 获取流程变量
	@org.junit.Test
	public void testGetVariable() throws Exception {
		String executionId = "helloworld.90001";
		Integer i = (Integer) processEngine.getExecutionService()
				.getVariable(executionId, "请假天数");
		System.out.println(i);
	}


(2)用taskService.setVariables()设置变量，对应的是taskService.getVariable()获取变量：

	// ============ 设置变量 ========================
	taskService.setVariables(taskId, variables); // 设置多个变量
					
	// ============ 获取变量 ========================
	taskService.getVariable(taskId, variableName);
	taskService.getVariableNames(taskId);
	taskService.getVariables(taskId, variableNames);


(3)executionService.startProcessInstanceByKey(processDefinitionKey, variablesMap); // 启动流程实例时，先设置一些变量
   taskService.completeTask(taskId, variablesMap); // 真正办理完任务前先设置一些变量


3.直接结束一个流程实例: (例如在部门经理不同意的时候，不需要总经理审批就可以直接结束这次流程)
	
	// 直接结束一个流程实例
	@org.junit.Test
	public void endProcessInstance() throws Exception {
		//已知的task的id
		String taskId = "440013";
		
		//通过taskId拿到本次的task		
		Task task = processEngine.getTaskService().getTask(taskId);
		
		//最后通过executionId来结束这个流程实例
		processEngine.getExecutionService().endProcessInstance(task.getExecutionId(), ProcessInstance.STATE_ENDED);
	}

	
三.任务(Task)

1.办理任务:可以按顺序办理任务或者按指定的连线办理任务两种
	
(1)	// 按顺序办理任务
	@Test
	public void completeTask() throws Exception {
		String taskId = "30001";
		processEngine.getTaskService().completeTask(taskId);
	}

(2)	// 按指定的连线办理任务
	@Test
	public void testProcess() throws Exception {
		String transitionName1 = "to 部门经理审批";
		String transitionName2 = "to 总经理审批";
		processEngine.getTaskService().completeTask(task.getId(), transitionName2); // 使用指定名称的Transition离开本活动
	}